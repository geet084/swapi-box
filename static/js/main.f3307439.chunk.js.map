{"version":3,"sources":["ScrollBox/ScrollBox.js","Icon/Icon.js","Favorites/Favorites.js","Nav/Nav.js","Card/Card.js","Display/Display.js","Api/Api.js","App/App.js","index.js"],"names":["scrollBox","_ref","crawlText","title","date","scroll","react_default","a","createElement","className","behavior","direction","scrollamount","Icon","url","choice","classes","getInfo","optText","type","src","alt","onClick","name","protoTypes","PropTypes","string","func","opText","Favorites","showFavorites","active","numFaves","newScroll","src_Icon_Icon","baseURL","Nav","iconURL","icons","map","icon","i","key","Card","props","concat","content","Object","keys","item","residents","resident","Display","selection","cards","selected","length","src_Card_Card","assign","fetchFilms","asyncToGenerator","regenerator_default","mark","_callee","response","films","wrap","_context","prev","next","fetch","sent","json","abrupt","results","film","opening_crawl","release_date","stop","this","apply","arguments","fetchSelection","_ref2","_callee2","_context2","_x","fetchWorldInfo","_ref3","_callee3","world","_context3","homeworld","population","_x2","fetchSpeciesInfo","_ref4","_callee4","species","_context4","_x3","fetchResidentInfo","_ref5","_callee6","inhabitants","updatedResidents","_context6","_ref6","_callee5","data","_context5","_x5","Promise","all","_x4","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getScrollMovie","e","_this$setState","updatedChoice","target","console","log","getPeopleInfo","getPlanetInfo","getVehicleInfo","setState","defineProperty","vehicles","vehicle","model","vehicle_class","passengers","state","scrollMovie","activeChoice","people","planets","favorites","movies","maxNum","Math","floor","randomNumber","random","updatedPeople","person","worldInfo","speciesInfo","objectSpread","updatedPlanets","planet","planetInfo","terrain","climate","_this$state","ScrollBox_ScrollBox","src_Favorites_Favorites","src_Nav_Nav","src_Display_Display","Component","ReactDOM","render","App_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.f3307439.chunk.js","sourcesContent":["import React from 'react'\nimport './ScrollBox.scss'\nimport PropTypes from 'prop-types'\n\nconst scrollBox = ({ crawlText, title, date }) => {\n  const scroll = (\n    <div>\n      <p>{crawlText}</p>\n      <p className=\"title\">\n        <span>{title}  &nbsp; &nbsp; {date}</span>\n      </p> \n    </div>\n  )\n  return (\n    <marquee\n      className=\"scroll\"\n      behavior=\"scroll\"\n      direction=\"up\"\n      scrollamount=\"1.5\">\n      {scroll}\n    </marquee>\n  )\n}\n\nscrollBox.propTypes = {\n  crawlText: PropTypes.string,\n  title: PropTypes.string,\n  data: PropTypes.string\n}\nexport default scrollBox;","import React from 'react'\nimport './Icon.scss'\nimport PropTypes from 'prop-types'\n\nconst Icon = ({url, choice, classes, getInfo, optText}) => {\n  \n  return (\n    <div className=\"section\">\n      <input type=\"image\"\n        src={url}\n        alt={choice}\n        onClick={getInfo}\n        className={classes}\n        name={choice}\n      />\n      <span className=\"tag\">{optText}{choice}</span>\n    </div>\n  )\n}\n\nIcon.protoTypes = {\n  url: PropTypes.string,\n  choice: PropTypes.string,\n  classes: PropTypes.string,\n  getInfo: PropTypes.func,\n  opText: PropTypes.string\n}\nexport default Icon;","import React from 'react'\nimport './Favorites.scss'\nimport Icon from '../Icon/Icon'\nimport PropTypes from 'prop-types'\n\nconst baseURL = \"http://icons.iconarchive.com/icons/sensibleworld/starwars/64/\";\n\nconst Favorites = ({showFavorites, active, numFaves, newScroll}) => {\n  let classes;\n  active === 'faves' ? classes = 'active' : classes = 'inactive'\n  \n  return (\n    <div className=\"favorites\">\n      <h2\n        className=\"swapi\"\n        onClick={newScroll}\n      >\n        SWAPI BOX\n      </h2>\n      <Icon\n        url={baseURL + 'R2D2-icon.png'}\n        getInfo={showFavorites}\n        classes={classes}\n        optText={numFaves + ' favorites'}\n      />\n    </div>\n  )\n}\n\nFavorites.propTypes = {\n  showFavorites: PropTypes.func,\n  active: PropTypes.string,\n  numFaves: PropTypes.number,\n  newScroll: PropTypes.func\n}\nexport default Favorites;","import React from 'react'\nimport './Nav.scss'\nimport Icon from '../Icon/Icon'\nimport PropTypes from 'prop-types'\n\nconst baseURL = 'http://icons.iconarchive.com/icons/sensibleworld/starwars/64/';\n\nconst Nav = ({ choice, getInfo }) => {\n  let iconList = ['people', 'planets', 'vehicles']\n  let iconURL = ['Leia-icon.png', 'Death-Star-icon.png', 'Millennium-Falcon-icon.png']\n\n  let icons = iconList.map((icon, i) => {\n    let selectedIcon = choice === icon\n\n    if (selectedIcon) {\n      return (\n        <Icon key={i}\n          url={baseURL + iconURL[i]}\n          choice={icon}\n          getInfo={getInfo}\n          classes={'active'}\n        />\n      )\n    } else {\n      return (\n        <Icon key={i}\n          url={baseURL + iconURL[i]}\n          choice={icon}\n          getInfo={getInfo}\n          classes={'inactive'}\n        />\n      )\n    }\n  })\n\n  return (\n    <div className=\"nav\">\n      {icons}\n  </div>\n  )\n}\n\nNav.propTypes = {\n  choice: PropTypes.string,\n  getInfo: PropTypes.func\n}\nexport default Nav;","import React from 'react'\nimport './Card.scss'\nimport PropTypes from 'prop-types'\n\nconst Card = (props) => {\n  const classes = `card ${props.choice}-bg`\n\n\n  let content = Object.keys(props).map(item => {\n    if (item === 'residents') {\n      return item = props.residents.map((resident, i) => {\n        if (i === 0) return `residents: ${resident}`\n        else return `,  ${resident}`\n      })\n    } else if (item !== 'choice') {\n      return <p key={item}>{item}: {props[item]}</p>\n    } else return ''\n  })\n\n  return (\n    <div className={classes}>\n      <span className=\"fave-icon\">\n        <i className=\"fas fa-jedi\"></i>\n      </span>\n      {content}\n    </div>\n  )\n}\n\nCard.propTypes = {\n  //IS THERE A BETTER WAY TO DO THIS?\n  props: PropTypes.string\n}\nexport default Card;","import React from 'react'\nimport Card from '../Card/Card'\nimport './Display.scss'\nimport PropTypes from 'prop-types'\n\nconst Display = ({ choice, selection }) => {\n  \n  if (choice !== '' && choice !== 'faves') {\n    let cards = selection.map((selected, i) => {\n      if (selected.residents && selected.residents.length < 1) {\n        selected.residents = ['none']\n      }\n      return <Card key={i} choice={choice} {...selected} />\n    })\n\n    return (\n      <div className=\"display\">\n        {cards}\n      </div>\n    )\n  } else if (choice === 'faves') { \n    return (\n      <div>\n      </div>\n    )\n  } else {\n    return (\n    <div className=\"select-category\">\n      <span className=\"select\">SELECT A CATEGORY</span>\n      <span className=\"category\"></span>\n    </div>\n    )\n  }\n\n}\n\nDisplay.protoTypes = {\n  choice: PropTypes.string,\n  selection: PropTypes.string\n}\nexport default Display;","const fetchFilms = async () => {\n  const url = 'https://swapi.co/api/films/'\n  let response = await fetch(url)\n  let films = await response.json()\n\n  return films.results.map(film => {\n    return {\n      title: film.title,\n      crawlText: film.opening_crawl,\n      date: film.release_date\n    }\n  })\n}\n\nconst fetchSelection = async (selection) => {\n  let url = 'https://swapi.co/api/'\n  let response = await fetch(url + selection)\n  \n  return response.json()\n}\n\nconst fetchWorldInfo = async (url) => {\n  \n  let response = await fetch(url)\n  let world = await response.json()\n  \n  return { homeworld: world.name, population: world.population }\n}\n\nconst fetchSpeciesInfo = async (url) => {\n  let response = await fetch(url)\n  let species = await response.json()\n\n  return {species: species.name}\n}\n\nconst fetchResidentInfo = async (inhabitants) => {\n  let updatedResidents = inhabitants.map(async url => {\n    let response = await fetch(url)\n    let data = await response.json()\n    return data.name\n  })\n  let residents = await Promise.all(updatedResidents)\n  \n  return { residents }\n}\n\nexport {\n  fetchFilms,\n  fetchSelection,\n  fetchWorldInfo,\n  fetchSpeciesInfo,\n  fetchResidentInfo\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport ScrollBox from '../ScrollBox/ScrollBox'\nimport Favorites from '../Favorites/Favorites'\nimport Nav from '../Nav/Nav'\nimport Display from '../Display/Display'\nimport { fetchFilms, fetchSelection, fetchWorldInfo, fetchSpeciesInfo, fetchResidentInfo } from '../Api/Api'\n\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scrollMovie: {},\n      activeChoice: '',\n      people: [],\n      planets: [],\n      vehicles: [],\n      favorites: []\n    }\n  }\n\n  componentDidMount = () => {\n    this.getScrollMovie();\n  }\n\n  async getScrollMovie() {\n    let movies = await fetchFilms();\n\n    let maxNum = Math.floor(movies.length);\n    let randomNumber = Math.floor(Math.random() * maxNum)\n    let scrollMovie = movies[randomNumber];\n\n    this.setState({ scrollMovie });\n  }\n\n  getInfo = async (e) => {\n    let selection = e.target.name\n    let data = await fetchSelection(selection)\n    let updatedChoice;\n    console.log(data)\n    if (selection === 'people') {\n      updatedChoice = await this.getPeopleInfo(data.results);\n      console.log(updatedChoice)\n    } else if (selection === 'planets') {\n      updatedChoice = await this.getPlanetInfo(data.results);\n    } else {\n      updatedChoice = this.getVehicleInfo(data.results);\n    }\n\n    this.setState({\n      [selection]: updatedChoice,\n      activeChoice: selection\n    })\n  }\n\n\n  async getPeopleInfo(people) {\n    let updatedPeople = people.map(async (person) => {\n      let worldInfo = await fetchWorldInfo(person.homeworld);\n      let speciesInfo = await fetchSpeciesInfo(person.species);\n\n      return {\n        name: person.name,\n        homeworld: person.homeworld,\n        population: person.population,\n        species: person.species,\n        ...worldInfo, ...speciesInfo\n      };\n    });\n    return Promise.all(updatedPeople);\n  }\n\n  async getPlanetInfo(planets) {\n    let updatedPlanets = planets.map(async (planet) => {\n      let planetInfo = await fetchResidentInfo(planet.residents);\n\n      return {\n        name: planet.name,\n        terrain: planet.terrain,\n        population: planet.population,\n        climate: planet.climate,\n        residents: planetInfo.residents\n      };\n    });\n    return Promise.all(updatedPlanets);\n  }\n\n  getVehicleInfo = (vehicles) => {\n    return vehicles.map(vehicle => {\n      return {\n        name: vehicle.name,\n        model: vehicle.model,\n        vehicle_class: vehicle.vehicle_class,\n        passengers: vehicle.passengers\n      }\n    })\n  }\n\n  render() {\n    let { scrollMovie, activeChoice, favorites } = this.state;\n  \n    if (scrollMovie !== {}) {\n      return (\n        <main className=\"App\">\n          <ScrollBox {...scrollMovie} />\n          <nav className=\"navigation\">\n            <Favorites\n              showFavorites={this.showFavorites}\n              active={activeChoice}\n              numFaves={favorites.length}\n              newScroll={this.componentDidMount}\n            />\n            <Nav\n              getInfo={this.getInfo}\n              choice={activeChoice}\n            />\n          </nav>\n          <Display\n            choice={activeChoice}\n            selection={this.state[activeChoice]} \n            />\n        </main>\n      );\n    } else {\n      return <div>Oops, something went wrong!</div>\n    }\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}